/**
 * \file OutputManager.hpp
 * \copyright (C) 2014 Tristan W. Bonsor
 */

#ifndef OUTPUTMANAGER_HPP_
#define OUTPUTMANAGER_HPP_

#include "color.h"
#include "Ray.hpp"
#include "Vector3d.hpp"

/**
 * \class OutputManager OutputManager.hpp "include/OutputManager.hpp"
 * \brief Output management.
 *
 * Provides the interface and logic for managing output.
 */
class OutputManager
{
public:

    /**
     * Initializes the output manager. Assumes glutInit has already been called.
     */
    static void init();

protected:

    /**
     * Render the scene using ray casting.
     */
    static void renderScene();

    /**
     * Calculate where a given pixel's unit dimension will fall on the image
     * plane.
     * @param unit The dimension's unit measure.
     * @param distance The width or height of the screen in which a given pixel
     * resides.
     * @return The pixel's corresponding unit dimension on the image plane.
     */
    static float getImagePlanePosition(const int& unit, const int& distance);

    /**
     * Calculate a direction vector from the camera to the image plane.
     * @param x The x coordinate of the pixel.
     * @param y The y coordinate of the pixel.
     * @return A direction vector in R3.
     */
    static Vector3d getRayDirection(const float& x, const float& y);

    /**
     * Generate a viewing ray.
     * @param x The x coordinate of the pixel.
     * @param y The y coordinate of the pixel.
     * @return A viewing ray.
     */
    static Ray generateViewingRay(const int& x, const int& y);

    /**
     * Deterimine the color generated by a viewing ray.
     * @param ray The viewing ray.
     * @param t0 The beginning contact interval.
     * @param t1 The end contact interval.
     * @return An RGB color.
     */
    static CRGB rayColor(const Ray& ray, const float& t0, const float& t1);

    /**
     * Find the minimum of two float values.
     * @param a A float value.
     * @param b A float value.
     * @return The minimum float value given a and b.
     */
    static float min(const float& a, const float& b);

    /**
     * Find the maximum of two float values.
     * @param a A float value.
     * @param b A float value.
     * @return The maximum float value given a and b.
     */
    static float max(const float& a, const float& b);

    /**
     * The current recursion level for calculating reflection/refraction.
     */
    static int m_recursion_level;
};

#endif /* OUTPUTMANAGER_HPP_ */
